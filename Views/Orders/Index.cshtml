@model List<TblOrder>

<div class="page-wrapper">
    <div class="content">
        <div class="page-header">
            <div class="page-title">
                <h4>Orders LIST </h4>
                <h6>Manage your orders</h6>
            </div>

            @if (ViewBag.PermissionType != "canView")
            {
                <div class="page-btn">
                    <a href="~/Orders/CreateOrder" class="btn btn-added"><img src="~/assets/img/icons/plus.svg" class="me-2" alt="img">Add New Orders</a>
                </div>
            }
            @if (ViewBag.PermissionType != "canView" || Context.Session.GetInt32("UserRoleId") == 5)
            {    <div class="page-btn">
                    <a class="btn"
                    data-bs-toggle="modal"
                    data-bs-target="#recents">
                        <img src="~/assets/img/icons/transcation.svg"
                        alt="img"
                        class="me-1" />
                        View Requests
                    </a>
                </div>
            }
        </div>

        <div class="card">
            <div class="card-body">


                @{
                    var orderTypes = new List<string> {"Sale", "Purchase" };
                }

                <div class="tabs-sets">
                    <ul class="nav nav-tabs" id="myTabs" role="tablist">
                        @foreach (var orderType in orderTypes)
                        {
                            <li class="nav-item" role="presentation">
                                <button class="nav-link @(orderType == "Sale" ? "active" : "")"
                                id="@orderType-tab"
                                data-bs-toggle="tab"
                                data-bs-target="#@orderType"
                                type="button"
                                aria-controls="@orderType"
                                aria-selected="@(orderType == "Sale" ? "true" : "false")"
                                role="tab">
                                    @orderType
                                </button>
                            </li>
                        }
                    </ul>


                    <div class="tab-content">
                        @foreach (var orderType in orderTypes)
                        {
                            <div class="tab-pane fade @(orderType == "Sale" ? "show active" : "")"
                            id="@orderType"
                            role="tabpanel"
                            aria-labelledby="@orderType-tab">

                                <!-- Common Table Structure -->
                                <div class="table-top">
                                    <div class="search-set">
                                        <div class="search-input">
                                            <a class="btn btn-searchset">
                                                <img src="~/assets/img/icons/search-white.svg" alt="img" />
                                            </a>
                                        </div>
                                    </div>
                                    <div class="wordset">
                                        <ul>
                                            <li>
                                                <a data-bs-toggle="tooltip" id="exportOrderBtn" data-bs-placement="top" title="excel">
                                                    <img src="~/assets/img/icons/excel.svg" alt="img" />
                                                </a>
                                            </li>
                                        </ul>
                                    </div>
                                </div>

                                <div class="table-responsive">
                                    <table class="table datanew" id="ordertable">
                                        <thead>
                                            <tr>
                                                <th>Buyer</th>
                                                <th>Seller</th>
                                                <th>Status</th>
                                                <th>Date</th>
                                                <th>Amount</th>
                                                <th>Qty</th>
                                                @if (orderType == "Sale")
                                                {
                                                    <th>Profits</th>
                                                }
                                                <th>Payment</th>
                                                <th>Action</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var order in Model.ToList().Where(order => order.OrderType == orderType))
                                            {
                                                <tr data-order-id="@order.OrderId">
                                                    <td>@order.BuyerName</td>
                                                    <td>@order.SellerName</td>
                                                    <td>
                                                        <span class="badges @(order.OrderStatus == "Pending" ? "bg-warning" : order.OrderStatus == "Success" ? "bg-lightgreen" : "bg-danger")">
                                                            @order.OrderStatus
                                                        </span>
                                                    </td>
                                                    <td>@order.OrderDate</td>
                                                    <td>@order.TotalAmount</td>
                                                    <td>@order.TotalQty</td>
                                                    @if(orderType == "Sale")
                                                    {
                                                        <td>@order.TotalProfit</td>
                                                    }
                                                    <td>
                                                        <span class="badges @(order.PaymentStatus == "Pending" ? "bg-warning" : order.PaymentStatus == "Paid" ? "bg-lightgreen" : "bg-danger")">
                                                            @order.PaymentStatus
                                                        </span>
                                                    </td>
                                                    <td>
                                                        <a class="me-3" href="@Url.Action("OrderDetails", "Orders", new { id = order.OrderId })">
                                                            <img src="~/assets/img/icons/eye.svg" alt="img">
                                                        </a>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>

                            </div>
                        }
                    </div>
                </div>

            </div>
        </div>

    </div>
</div>


@* Model For Buying Requests *@
  <div class="modal fade" id="recents" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Purchase Requests</h5>
          <button
            type="button"
            class="close"
            data-bs-dismiss="modal"
            aria-label="Close"
          >
            <span aria-hidden="true">×</span>
          </button>
        </div>
        <div class="modal-body">
                <table class="table datanew table-bordered">
                    <thead>
                        <tr>
                            <th>Buyer</th>
                            <th>Seller</th>
                            <th>Date</th>
                            <th>Amount</th>
                            <th>Product Qty</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var order in Model)
                        {
                            @if (order.OrderStatus == "Pending" && order.CanEditStatus && order.PaymentStatus == "Paid")
                            {
                                <tr>
                                    <td>@order.BuyerName</td>
                                    <td>@order.SellerName</td>
                                    <td>@order.OrderDate</td>
                                    <td>@order.TotalAmount</td>
                                    <td>@order.TotalQty</td>
                                    <td>
                                        <button class="btn btn-warning" onclick="confirmOrder(@order.OrderId)">Update Status</button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
        </div>
      </div>
    </div>
  </div>

@section Scripts {

    <script>
                     function confirmOrder(orderId) {
            Swal.fire({
                title: 'Choose an action',
                text: "You can either accept, reject, or cancel this order.",
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#28a745', // Green for accept
                cancelButtonColor: '#d33', // Red for reject
                showDenyButton: true, // For reject
                denyButtonText: 'Reject Order', // Reject button
                confirmButtonText: 'Accept Order', // Accept button
            }).then((result) => {
                if (result.isConfirmed) {
                    // Accept order logic
                    fetch('/Orders/UpdateOrderStatus', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ orderId: orderId, newStatus: "Success", paymentStatus: "Paid" }) // Assuming you will handle payment status in the backend
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire(
                                'Success!',
                                'Order status updated to Success!',
                                'success'
                            );
                            setTimeout(function () {
                                location.reload(); // Reload the page after 2 seconds
                            }, 2000);
                        } else {
                            Swal.fire(
                                'Error',
                                data.message || "An error occurred while updating the order status.",
                                'error'
                            );
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire(
                            'Oops!',
                            'An error occurred while processing your request. Please try again.',
                            'error'
                        );
                    });
                } else if (result.isDenied) {
                    // Reject order logic
                    fetch('/Orders/UpdateOrderStatus', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ orderId: orderId, newStatus: "Rejected", paymentStatus: "Pending On Refund" })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire(
                                'Rejected!',
                                'Order status updated to Rejected. Refund will be processed soon.',
                                'error'
                            );
                            setTimeout(function () {
                                location.reload(); // Reload the page after 2 seconds
                            }, 2000);
                        } else {
                            Swal.fire(
                                'Error',
                                data.message || "An error occurred while rejecting the order.",
                                'error'
                            );
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire(
                            'Oops!',
                            'An error occurred while processing your request. Please try again.',
                            'error'
                        );
                    });
                } else if (result.dismiss === Swal.DismissReason.cancel) {
                    // Cancel order logic (no changes)
                    Swal.fire(
                        'Cancelled',
                        'The order status was not changed.',
                        'info'
                    );
                }
            });
        }


        // Optional function to update the order row on the page without reloading
                function updateOrderRow(orderId) {
            const orderRow = document.querySelector(`tr[data-order-id="${orderId}"]`);
            if (orderRow) {
                const statusCell = orderRow.querySelector('.order-status');
                if (statusCell) {
                    statusCell.innerHTML = `<span class="badges bg-lightgreen">Success</span>`;
                }
            }
        }


         document.getElementById("exportOrderBtn").addEventListener("click", function () {
                        window.location.href = "/Orders/ExportOrders";
            });
    </script>

    @if (TempData["transaction-toast"] != null)
    {
        <script>

            $(document).ready(function () {
                showToast('@TempData["transaction-toast"]','@TempData["transaction-toastType"]');
            });

        </script>
    }


}
